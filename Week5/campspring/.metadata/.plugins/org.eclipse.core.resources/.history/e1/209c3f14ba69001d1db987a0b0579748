package kodlama.io.rentACar.business.concretes;

import java.util.List;

import org.springframework.stereotype.Service;

import kodlama.io.rentACar.business.abstracts.BrandService;
import kodlama.io.rentACar.business.requests.brandRequest.CreateBrandRequest;
import kodlama.io.rentACar.business.requests.brandRequest.DeleteBrandRequest;
import kodlama.io.rentACar.business.requests.brandRequest.UpdateBrandRequest;
import kodlama.io.rentACar.business.responses.brandResponse.CreateBrandResponse;
import kodlama.io.rentACar.business.responses.brandResponse.DeleteBrandResponse;
import kodlama.io.rentACar.business.responses.brandResponse.GetAllBrandsResponse;
import kodlama.io.rentACar.business.responses.brandResponse.UpdateBrandResponse;
import kodlama.io.rentACar.core.utilities.mapping.ModelMapperService;
import kodlama.io.rentACar.dataAccess.abstracts.BrandRepository;
import kodlama.io.rentACar.entities.concretes.Brand;
import lombok.AllArgsConstructor;

@Service // Bu sınıf bir business nesnesidir
@AllArgsConstructor
public class BrandManager implements BrandService {

	private BrandRepository brandRepository;
	private ModelMapperService modelMapperService;

	
	@Override
	public CreateBrandResponse add(CreateBrandRequest createBrandRequest) {
		Brand brand = this.modelMapperService.forRequest().map(createBrandRequest, Brand.class);
		brandRepository.save(brand);
		
		CreateBrandResponse createBrandResponse = this.modelMapperService.forResponse().map(brand,
				CreateBrandResponse.class);
		return createBrandResponse;
	}

	@Override
	public UpdateBrandResponse update(UpdateBrandRequest updateBrandRequest) {
		Brand brand = this.modelMapperService.forRequest().map(updateBrandRequest, Brand.class);
		brandRepository.save(brand);
		
		UpdateBrandResponse updateBrandResponse = this.modelMapperService.forResponse().map(brand, UpdateBrandResponse.class);
		return updateBrandResponse;
	}

	@Override
	public DeleteBrandResponse delete(DeleteBrandRequest deleteBrandRequest) {
//		Brand brand = this.modelMapperService.forRequest().map(deleteBrandRequest, Brand.class);
//		brandRepository.delete(brand);
//		
//		DeleteBrandResponse deleteBrandResponse = new DeleteBrandResponse();
//		return deleteBrandResponse;
		
		Brand brand = brandRepository.findById(deleteBrandRequest.getId()).get();
		brandRepository.delete(brand);
		DeleteBrandResponse deleteBrandResponse = this.modelMapperService.forResponse().map(brand, DeleteBrandResponse.class);
		return deleteBrandResponse;
	}

	@Override
	public List<GetAllBrandsResponse> getAll() {
		// TODO Auto-generated method stub
		return null;
	}
	

}
